##################################################
#########   KRK   ################################
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 5229 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 1
Size of run length encoded endgame = 4 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 67 bits, including the description of 9 elements.

 |_               
1  |_             
  8  |___         
    2   _|___     
       |    _|_   
      3 9  |   |  
          7 6 5 4 

Huff tree size = 138 bits, including the description of 14 elements.

 |___                       
7   _|___                   
   |    _|_                 
  3 4  |   |_               
      1 2 5  |_             
            6  |_           
              4  |___       
              6 1   _|_     
                5  |   |_   
                  3 8 2  |  
                  1   3 1 3 
                        2 9 



Size of run length encoded endgame = 2644 bytes.
	(num bits = 21152)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 1
Huff tree size = 26 bits, including the description of 1 elements.

2 
9 
5 
6 
8 



Size of run length encoded endgame = 5 bytes.
	(num bits = 40)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 2856 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_btm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 2297 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 13 bits, including the description of 2 elements.

 |  
2 1 

Huff tree size = 499 bits, including the description of 54 elements.

  _________|_________________________                                                               
 |___                 _______________|_______________________________                               
5   _|_         _____|_______                         _______________|_______________               
   |   |_     _|_         ___|___             _______|_______                 _______|_______       
  1 4 6  |   |   |_     _|_     _|_       ___|___         ___|___         ___|___         ___|_____ 
    5   2 5 3 4 9  |   |   |   |   |    _|_     _|_     _|_     _|_     _|_     _|_     _|_     ___|
          3       1 4 2 4 7 2 3 1 3 1  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |_   
                  8 3 7 4   6 6 7 5 4 4 1 2 2 2 3 1 2 2 2 3 3 3 1 1 1 3 3 8 3 4 2 1 4 4 3 5 1 2  |  
                                      2 5 2 3 1 0 3 5 4 0 3 1 7 6 9 2 4 9   2 6 8 0 1 0 8 4 1 9 4 4 
                                                                                                8 7 

Huff tree size = 30 bits, including the description of 4 elements.

 |_     
1  |_   
  3  |  
    8 2 



Size of run length encoded endgame = 1841 bytes.
	(num bits = 14728)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 150 bits, including the description of 13 elements.

 |_                       
5  |_                     
  1  |_                   
    4  |___               
    5 5   _|_             
      3  |   |_           
        6 5 7  |___       
          5   4   _|_     
              6  |   |_   
                4 5 5  |  
                7 1 4 4 6 
                        1 

Huff tree size = 30 bits, including the description of 4 elements.

 |_     
1  |_   
  3  |  
    8 2 



Size of run length encoded endgame = 1213 bytes.
	(num bits = 9704)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRK_btm.dat
##################################################
#########   KQK   ################################
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 7278 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 1
Size of run length encoded endgame = 4 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 94 bits, including the description of 12 elements.

 |_                     
1  |_                   
  3  |_                 
    8  |_               
      2  |_             
        1  |___         
        1 4   _|___     
             |    _|_   
            6 7  |   |  
                1 5 1 9 
                2   0   

Huff tree size = 137 bits, including the description of 16 elements.

  _|_                           
 |   |_                         
2 1 4  |_                       
      3  |_                     
        5  |_                   
          6  |_                 
            7  |___             
              8   _|___         
                 |    _|___     
                9 1  |    _|_   
                  6 2 1  |   |  
                    4 8 1 1 1 2 
                        2 4 3 0 



Size of run length encoded endgame = 4694 bytes.
	(num bits = 37552)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 1
Huff tree size = 26 bits, including the description of 1 elements.

2 
9 
5 
6 
8 



Size of run length encoded endgame = 5 bytes.
	(num bits = 40)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 3019 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_btm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 2395 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 13 bits, including the description of 2 elements.

 |  
2 1 

Huff tree size = 502 bits, including the description of 54 elements.

  _________|___________________________                                                             
 |___                   _______________|___________________________                                 
5   _|_         _______|_______                     _______________|_______________                 
   |   |_     _|___         ___|___         _______|_______                 _______|_______         
  1 6 4  |   |    _|_     _|_     _|_     _|___         ___|___         ___|___         ___|_____   
      5 9 4 2 3  |   |   |   |   |   |   |    _|_     _|_     _|_     _|_     _|_     _|_     ___|__
                7 3 1 3 1 4 2 1 2 8 3 1 4 4  |   |   |   |   |   |   |   |   |   |   |   |   |_     
                  5 7 6 3 1 7 8 6   4 4 2 6 2 2 2 2 2 3 3 1 3 2 2 3 1 4 1 1 4 3 1 1 4 4 2 3 3  |   |
                                            3 2 1 9 5 0 1 5 8 4 0 9 6 3 1 0 0 7 2 9 7 4 8 2 3 5 4 4 
                                                                                              1 8 9 
                                                                                                    

Huff tree size = 29 bits, including the description of 4 elements.

 |_     
1  |_   
  3  |  
    6 2 



Size of run length encoded endgame = 1945 bytes.
	(num bits = 15560)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 160 bits, including the description of 16 elements.

  _|___                         
 |    _|_                       
5 1  |   |___                   
    5 6 4   _|_                 
    3   5  |   |_               
          4 4 7  |___           
          6 7   8   _|___       
                   |    _|_     
                  5 1  |   |_   
                  5 3 5 5 2  |  
                      1 4   2 5 
                            7 6 

Huff tree size = 29 bits, including the description of 4 elements.

 |_     
1  |_   
  3  |  
    6 2 



Size of run length encoded endgame = 1262 bytes.
	(num bits = 10096)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQK_btm.dat
##################################################
##########   KPK    ##############################
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 12576 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 9874 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 13 bits, including the description of 2 elements.

 |  
2 1 

Huff tree size = 247 bits, including the description of 27 elements.

 |___                                                 
1   _|_                                               
   |   |_                                             
  2 3 4  |_                                           
        5  |_                                         
          6  |_______                                 
            7   _____|_______                         
               |_         ___|_____                   
              1  |_     _|_     ___|_____             
              6 8  |   |   |   |_     ___|___         
                  9 2 1 1 1 2 1  |   |_     _|___     
                    3 3 1 0 4 7 2 2 1  |   |    _|_   
                                6 1 8 2 3 1 1  |   |  
                                      9 1 2 9 2 1 2 2 
                                              5 5 2 0 

Huff tree size = 525 bits, including the description of 53 elements.

    ___|_____                                                                                       
  _|_     ___|___________________                                                                   
 |   |   |_         _____________|_______________                                                   
2 3 6 5 4  |    ___|_____                 _______|_______________                                   
          1 7  |_     ___|___         ___|___             _______|_______                           
              4  |   |_     _|_     _|_     _|_       ___|___         ___|_____                     
              8 1 1 1  |   |   |   |   |   |   |    _|_     _|_     _|_     ___|_______             
                8 1 0 2 1 2 2 2 3 2 1 2 4 9 1 2 1  |   |   |   |   |   |   |_       ___|___         
                      4 2 6 5 0 2 2 3 7 7   7 8 9 1 3 2 8 3 3 1 1 2 3 3 3 2  |    _|_     _|_       
                                                  5 5 1   6 3 6 4 3 4 7 0 9 3 3  |   |   |   |___   
                                                                            8 1 4 4 3 4 4 4 4   _|__
                                                                                5 0 9 1 2 3 4  |    
                                                                                              5 6  |
                                                                                              1 2 6 
                                                                                                4 2 
                                                                                                  7 



Size of run length encoded endgame = 8902 bytes.
	(num bits = 71216)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 247 bits, including the description of 27 elements.

 |___                                                 
1   _|_                                               
   |   |_                                             
  2 3 4  |_                                           
        5  |_                                         
          6  |_______                                 
            7   _____|_______                         
               |_         ___|_____                   
              1  |_     _|_     ___|_____             
              6 8  |   |   |   |_     ___|___         
                  9 2 1 1 1 2 1  |   |_     _|___     
                    3 3 1 0 4 7 2 2 1  |   |    _|_   
                                6 1 8 2 3 1 1  |   |  
                                      9 1 2 9 2 1 2 2 
                                              5 5 2 0 

Huff tree size = 399 bits, including the description of 42 elements.

  ___|_____                                                                         
 |_     ___|_____________                                                           
1  |   |_     ___________|_______________                                           
  4 5 6  |   |___                 _______|_______________                           
        3 2 7   _|___         ___|___             _______|_______                   
               |    _|_     _|_     _|_       ___|___         ___|___               
              1 8  |   |   |   |   |   |    _|_     _|_     _|_     _|___           
              3   3 2 1 3 2 1 1 2 2 2 1 3  |   |   |   |   |   |   |    _|_         
                  2 9 1 7 1 0 2 2 0 8 4 8 2 3 2 3 3 2 3 3 2 1 1 2 1 1  |   |_       
                                          6 6 3 5 1 4 4 0 5 8 9 7 5 7 3 4 4  |_     
                                                                      9 0 7 3  |_   
                                                                            3 9  |  
                                                                                2 1 
                                                                                1 6 
                                                                                9   
                                                                                3   
                                                                                6   



Size of run length encoded endgame = 7413 bytes.
	(num bits = 59304)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 12231 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_btm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Size of run length encoded endgame = 10932 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 13 bits, including the description of 2 elements.

 |  
2 1 

Huff tree size = 450 bits, including the description of 48 elements.

  ___|___                                                                                       
 |_     _|___________                                                                           
2  |   |    _________|___________________                                                       
  4 5 3 1  |___               ___________|_______________                                       
          6   _|_         ___|___                 _______|___________                           
             |   |_     _|_     _|___         ___|___         _______|_______                   
            7 1 9  |   |   |   |    _|_     _|_     _|_     _|___         ___|_____             
              0   1 1 1 1 2 1 1 3  |   |   |   |   |   |   |    _|_     _|_     ___|___         
                  9 8 7 2 4 1 6 2 2 2 2 3 2 2 2 8 1 1 2 2 1 4  |   |   |   |   |_     _|___     
                                  5 6 3 3 0 7 2   5 3 8 1 4 5 3 2 4 3 4 3 3 3 3  |   |    _|_   
                                                              0 9 2 4 6 7 6 1 5 4 4 4 3  |   |  
                                                                                1 4 3 8 4 4 4 3 
                                                                                        0 8 7 9 

Huff tree size = 348 bits, including the description of 38 elements.

  ___|___                                                                   
 |_     _|_                                                                 
3  |   |   |_______                                                         
  2 4 6 5 1   _____|_______________                                         
             |_             _______|___________                             
            7  |_       ___|___         _______|_______                     
              1  |    _|_     _|_     _|___         ___|_____               
              2 1 1  |   |   |   |   |    _|_     _|_     ___|___           
                1 3 3 2 1 1 8 2 9 1 1 1  |   |   |   |   |_     _|___       
                    1 4 0 9   3   6 7 4 3 2 3 2 1 2 3 2 2  |   |    _|_     
                                        2 6 9 1 8 0 5 2 7 2 2 2 1  |   |_   
                                                          9 8 5 5 3 3 3  |  
                                                                  7 0 3 3 3 
                                                                        6 4 



Size of run length encoded endgame = 9280 bytes.
	(num bits = 74240)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 2
Huff tree size = 445 bits, including the description of 47 elements.

  ___|___                                                                                     
 |_     _|_________                                                                           
1  |   |    _______|_____________________                                                     
  4 5 3 2  |_               _____________|_______________                                     
          6  |_         ___|_____                 _______|_______                             
            7  |_     _|_     ___|___         ___|___         ___|_______                     
              4  |   |   |   |_     _|_     _|_     _|_     _|_       ___|___                 
              5 2 1 1 2 3 4 1  |   |   |   |   |   |   |   |   |    _|_     _|_____           
                8 9 2 4 2 6 1 2 9 2 1 2 3 1 2 3 1 2 1 3 2 1 1 3 3  |   |   |    ___|___       
                              0   6 4 5 8 6 7 5 0 9 7 6 1 3 8 7 4 1 3 4 2 3 3  |_     _|_     
                                                                  5 9 7 2 0 3 8  |   |   |_   
                                                                                9 4 4 2 3  |  
                                                                                3 0 4 3 1 1 4 
                                                                                          4 3 
                                                                                          2   

Huff tree size = 348 bits, including the description of 38 elements.

  ___|___                                                                   
 |_     _|_                                                                 
3  |   |   |_______                                                         
  2 4 6 5 1   _____|_______________                                         
             |_             _______|___________                             
            7  |_       ___|___         _______|_______                     
              1  |    _|_     _|_     _|___         ___|_____               
              2 1 1  |   |   |   |   |    _|_     _|_     ___|___           
                1 3 3 2 1 1 8 2 9 1 1 1  |   |   |   |   |_     _|___       
                    1 4 0 9   3   6 7 4 3 2 3 2 1 2 3 2 2  |   |    _|_     
                                        2 6 9 1 8 0 5 2 7 2 2 2 1  |   |_   
                                                          9 8 5 5 3 3 3  |  
                                                                  7 0 3 3 3 
                                                                        6 4 



Size of run length encoded endgame = 8498 bytes.
	(num bits = 67984)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KPK)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KPK_btm.dat
##################################################
##########     KRKP    ###########################
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 242315 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRKP)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRKP_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 37 bits, including the description of 5 elements.

 |_       
1  |_     
  3  |_   
    2  |  
      4 5 

Huff tree size = 72 bits, including the description of 9 elements.

 |_               
1  |_             
  2  |_           
    3  |_         
      4  |_       
        5  |_     
          6  |_   
            7  |  
              9 1 
                0 

Huff tree size = 4036 bits, including the description of 297 elements.

    ___|_____________                                                                               
  _|_       _________|___________________                                                           
 |   |    _|___               ___________|___________________________                               
5 4 1 6  |    _|_         ___|___                   _________________|______________________________
        7 3  |   |_     _|_     _|___         _____|_______                               __________
            4 3 3  |   |   |   |    _|_     _|_         ___|___               ___________|__________
            7 8 7 3 2 3 2 2 3 3 4  |   |   |   |_     _|_     _|_         ___|___                 __
                  0 8 6   9 9 1 6 3 2 2 2 2 2 4  |   |   |   |   |_     _|_     _|___         ___|__
                                  5 7 2 3 1 0 5 8 4 6 3 4 1 4 9 4  |   |   |   |    _|_     _|_     
                                                7 8 8 2 3 9 4 5 0 8 7 7 7 2 8 8 9  |   |   |   |   |
                                                    8             6 9 8 7 4 5   4 3 7 1 1 1 4 4 6 7 
                                                                                  3 6 0 5 7 9 2 8 1 
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    



Size of run length encoded endgame = 177521 bytes.
	(num bits = 1420168)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KRKP)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRKP_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 729529 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRKP)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRKP_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 1498 bits, including the description of 135 elements.

 |_______                                                                                           
1     ___|_______________________                                                                   
    _|_           _______________|_______________________                                           
   |   |    _____|_______                 _______________|_______________                           
  2 4 5 3  |_         ___|___         ___|_______                 _______|_______                   
          6  |_     _|_     _|_     _|_       ___|___         ___|___         ___|_______           
            7  |   |   |   |   |   |   |    _|_     _|_     _|_     _|_     _|_     _____|__________
              9 2 2 4 1 1 2 8 1 3 1 2 2 1  |   |   |   |   |   |   |   |   |   |   |_         ______
                0 1 6 7 9 3   0 1 8 2 9 1 4 3 2 3 1 2 3 1 3 3 3 1 1 4 3 2 2 2 3 1 3  |_     _|___   
                                          8 5 6 4 5 8 3 2 2 6 9 3 4 0 0 5 7 4 7 6 8 4  |   |    _|__
                                                                                    2 5 4 4 4  |    
                                                                                      0 3 5 1 4 4  |
                                                                                              9 4 8 
                                                                                                  9 
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    

Huff tree size = 342 bits, including the description of 36 elements.

 |___                                                                   
1   _|_                                                                 
   |   |_                                                               
  2 4 3  |_                                                             
        5  |_                                                           
          6  |_______                                                   
            7     ___|_______                                           
                _|_     _____|_______                                   
               |   |   |_         ___|_______                           
              1 1 9 1 8  |_     _|_       ___|_____                     
              2 1   0   1  |   |   |    _|_     ___|___                 
                        3 1 2 1 1 1 1  |   |   |_     _|___             
                          4 4 7 9 8 6 1 2 2 2 2  |   |    _|___         
                                      5 7 5 2 0 3 2 2 2  |    _|_       
                                                2 3 6 1 3 2  |   |_     
                                                        4 8 3 2 3  |_   
                                                            0 9 1 3  |  
                                                                  9 4 3 
                                                                    2 3 

Huff tree size = 436 bits, including the description of 46 elements.

 |___                                                                                       
1   _|___                                                                                   
   |    _|_                                                                                 
  3 2  |   |_                                                                               
      6 5 4  |_________                                                                     
            7   _______|_________________                                                   
               |___             _________|_______________                                   
              8   _|_       ___|___               _______|_________                         
                 |   |    _|_     _|_         ___|___         _____|_______                 
                1 9 1 1  |   |   |   |_     _|_     _|_     _|_         ___|_____           
                0   1 6 3 1 2 1 1 1 1  |   |   |   |   |   |   |_     _|_     ___|___       
                        2 3 4 7 2 8 9 1 2 2 2 3 1 3 2 2 2 2 2 2  |   |   |   |_     _|_     
                                      5 8 5 6 4 4 3 2 3 9 1 7 0 3 4 3 3 4 3 3  |   |   |_   
                                                                6 1 7 1 0 5 0 4 3 3 4 4  |  
                                                                              4 8 9 3 2 4 4 
                                                                                        6 5 



Size of run length encoded endgame = 553326 bytes.
	(num bits = 4426608)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KRKP)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KRKP_btm.dat
##################################################
############   KQKR   ############################
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 17326 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQKR)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQKR_wtm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 37 bits, including the description of 5 elements.

 |_       
1  |_     
  2  |_   
    3  |  
      5 4 

Huff tree size = 63 bits, including the description of 8 elements.

 |_             
1  |_           
  3  |_         
    2  |_       
      4  |_     
        5  |_   
          6  |  
            7 8 

Huff tree size = 2631 bits, including the description of 193 elements.

  _____|_________________________________                                                           
 |_               _______________________|__________________________________________________________
7  |_       _____|_______                                         __________________________________
  6  |    _|_         ___|_______                 _______________|_______________                   
  3 1 6  |   |_     _|_       ___|___         ___|_______                 _______|_________         
    0 4 5 6 6  |   |   |    _|_     _|_     _|_       ___|___         ___|___         _____|_______ 
    5   1 2 1 1 2 4 5 3 1  |   |   |   |   |   |    _|_     _|_     _|_     _|_     _|_         ___|
    0   1     2 5 9 0 8 2 5 1 4 6 1 3 3 1 1 3 4 3  |   |   |   |   |   |   |   |   |   |_     _|_   
              0 5 5 3 1 7 5 5   0 1 1 9 2 8 3 7   4 4 1 1 1 4 2 1 6 7 1 2 1 4 2 2 1 1 5  |   |   |  
                                  3     9 4 2     5 4 0   2 3 5 1 0 1 7 3 0 8   6 2 4 6 5 4 3 1 2 4 
                                                  5 7 2   5 9 3 2 8   8   1 7   7 6 5   9 1 8 0 4 2 
                                                      3         0         5               7 9 0 8 5 
                                                                                              7     
                                                                                                    
                                                                                                    



Size of run length encoded endgame = 10430 bytes.
	(num bits = 83440)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 1, b_i_n 1, r_stm 0)(KQKR)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQKR_wtm.dat
Only win/draw/loss information in the run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Size of run length encoded endgame = 309696 bytes.
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQKR)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQKR_btm.dat
Only win/draw/loss information in the huffman run length encoded version.
Mapping all won in n to ENDGAME_TABLE_WIN, and lost in n to ENDGAME_TABLE_LOSS
Num. diff. values = 3
Huff tree size = 943 bits, including the description of 91 elements.

  _|_____                                                                                           
 |    ___|___                                                                                       
1 7  |_     _|___                                                                                   
    8  |   |    _|_______                                                                           
      1 3 4 2  |    _____|_______                                                                   
      5       5 6  |_         ___|___________________                                               
                  1  |_     _|_         _____________|___________________________                   
                  6 9  |   |   |    ___|_____                     _______________|__________________
                      1 1 1 1 2 1  |_     ___|___         _______|_______                     ______
                      0 2 1 4 4 3 3  |   |_     _|_     _|___         ___|___         _______|______
                                  2 6 6 1  |   |   |   |    _|_     _|_     _|_     _|___         __
                                    4 5 7 1 2 4 4 4 2 5 3  |   |   |   |   |   |   |    _|_     _|_ 
                                          8 5 1 9 0 7 6 3 6 7 7 4 4 5 4 5 3 6 1 5 2 5  |   |   |   |
                                                          7 3 2 8 3 3 4 7 5 6 9 8 6 2 2 3 2 3 4 3 4 
                                                                                      0 4 1 9 7 1 2 
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    

Huff tree size = 116 bits, including the description of 15 elements.

 |___                         
1   _|___                     
   |    _|_                   
  2 3  |   |_                 
      4 7 5  |_               
            6  |_____         
              8   ___|___     
                 |_     _|_   
                1  |   |   |  
                2 1 1 1 9 1 1 
                  0 3 4   6 1 

Huff tree size = 308 bits, including the description of 33 elements.

 |___                                                             
1   _|___                                                         
   |    _|_                                                       
  7 2  |   |_                                                     
      3 4 6  |_                                                   
            5  |_____                                             
              8   ___|_____                                       
                 |_     ___|_____                                 
                1  |   |_     ___|___________                     
                0 1 1 9  |   |_       _______|_______             
                  5 1   1 3 1  |    _|___         ___|___         
                        9 6 4 1 3  |    _|_     _|_     _|___     
                              8 5 2 4  |   |   |   |   |    _|_   
                                  7 4 2 4 1 3 4 1 1 2 3 3  |   |  
                                      2 5 2 0 3 6 3 3 8 7 2 3 2 2 
                                                          1 1 8 9 



Size of run length encoded endgame = 199697 bytes.
	(num bits = 1597576)
Restoring table with full information.
EndgameFunctionality::load_table(r_t_stm 0, b_i_n 1, r_stm 0)(KQKR)
loading endgame /users/doktoren/public_html/master_thesis/endgames/KQKR_btm.dat
